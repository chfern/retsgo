// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/fernandochristyanto/retsgo/app/core"
	"github.com/fernandochristyanto/retsgo/app/db"
	"github.com/fernandochristyanto/retsgo/app/handlers/v1"
	"github.com/fernandochristyanto/retsgo/app/middleware"
	"github.com/fernandochristyanto/retsgo/app/middleware/jwt/validator"
	"github.com/fernandochristyanto/retsgo/repositories"
	"github.com/fernandochristyanto/retsgo/services"
)

// Injectors from container.go:

func GetLogger() *core.Log {
	logger := core.NewLogrusLogger()
	log := core.NewLogger(logger)
	return log
}

func GetUserRepository() *repositories.UserRepository {
	gormDB := db.GetDB()
	userRepository := repositories.NewUserRepository(gormDB)
	return userRepository
}

func GetUserService() *services.UserService {
	userRepository := GetUserRepository()
	userService := services.NewUserService(userRepository)
	return userService
}

func GetLoggerMiddleware() *middleware.LogMiddleware {
	log := GetLogger()
	logMiddleware := middleware.NewLogMiddleware(log)
	return logMiddleware
}

func GetPanicMiddleware() *middleware.PanicMiddleware {
	log := GetLogger()
	panicMiddleware := middleware.NewPanicMiddleware(log)
	return panicMiddleware
}

func GetJWTMiddleware() *middleware.JWTMiddleware {
	userService := GetUserService()
	jwtMiddleware := middleware.NewJWTMiddleware(userService)
	return jwtMiddleware
}

func GetJWTUserValidator() *validator.UserValidator {
	userService := GetUserService()
	userValidator := validator.NewUserValidator(userService)
	return userValidator
}

func GetJWTHandler() *v1.JWTHandler {
	userService := GetUserService()
	jwtHandler := v1.NewJWTHandler(userService)
	return jwtHandler
}
